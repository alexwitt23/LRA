# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_m67528b5919f90a46eeeb39e7c6323718')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_m67528b5919f90a46eeeb39e7c6323718')
    _m67528b5919f90a46eeeb39e7c6323718 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_m67528b5919f90a46eeeb39e7c6323718', [dirname(__file__)])
        except ImportError:
            import _m67528b5919f90a46eeeb39e7c6323718
            return _m67528b5919f90a46eeeb39e7c6323718
        try:
            _mod = imp.load_module('_m67528b5919f90a46eeeb39e7c6323718', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _m67528b5919f90a46eeeb39e7c6323718 = swig_import_helper()
    del swig_import_helper
else:
    import _m67528b5919f90a46eeeb39e7c6323718
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _m67528b5919f90a46eeeb39e7c6323718.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_equal(self, x)

    def copy(self):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_copy(self)

    def next(self):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_next(self)

    def __next__(self):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___next__(self)

    def previous(self):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_previous(self)

    def advance(self, n):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _m67528b5919f90a46eeeb39e7c6323718.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
# this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

import sim_services
class Rocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rocket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["altitude"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_altitude_set
    __swig_getmethods__["altitude"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_altitude_get
    if _newclass:
        altitude = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_altitude_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_altitude_set)
    __swig_setmethods__["velocity"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_velocity_set
    __swig_getmethods__["velocity"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_velocity_get
    if _newclass:
        velocity = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_velocity_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_velocity_set)
    __swig_setmethods__["acceleration"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_acceleration_set
    __swig_getmethods__["acceleration"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_acceleration_get
    if _newclass:
        acceleration = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_acceleration_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_acceleration_set)
    __swig_setmethods__["thrust"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_thrust_set
    __swig_getmethods__["thrust"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_thrust_get
    if _newclass:
        thrust = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_thrust_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_thrust_set)
    __swig_setmethods__["area"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_area_set
    __swig_getmethods__["area"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_area_get
    if _newclass:
        area = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_area_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_area_set)
    __swig_setmethods__["Cd"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_Cd_set
    __swig_getmethods__["Cd"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_Cd_get
    if _newclass:
        Cd = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_Cd_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_Cd_set)
    __swig_setmethods__["mass"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_mass_set
    __swig_getmethods__["mass"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_mass_get
    if _newclass:
        mass = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_mass_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_mass_set)
    __swig_setmethods__["mdot"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_mdot_set
    __swig_getmethods__["mdot"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_mdot_get
    if _newclass:
        mdot = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_mdot_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_mdot_set)
    __swig_setmethods__["massBurn"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_massBurn_set
    __swig_getmethods__["massBurn"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_massBurn_get
    if _newclass:
        massBurn = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_massBurn_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_massBurn_set)
    __swig_setmethods__["mass0"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_mass0_set
    __swig_getmethods__["mass0"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_mass0_get
    if _newclass:
        mass0 = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_mass0_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_mass0_set)
    __swig_setmethods__["touchDown"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_touchDown_set
    __swig_getmethods__["touchDown"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_touchDown_get
    if _newclass:
        touchDown = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_touchDown_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_touchDown_set)
    __swig_setmethods__["rf"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_rf_set
    __swig_getmethods__["rf"] = _m67528b5919f90a46eeeb39e7c6323718.Rocket_rf_get
    if _newclass:
        rf = _swig_property(_m67528b5919f90a46eeeb39e7c6323718.Rocket_rf_get, _m67528b5919f90a46eeeb39e7c6323718.Rocket_rf_set)

    def default_data(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket_default_data(self, *args)

    def state_init(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket_state_init(self, *args)

    def state_deriv(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket_state_deriv(self, *args)

    def state_integ(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket_state_integ(self, *args)

    def touch_down(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket_touch_down(self, *args)

    def __getitem__(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket___getitem__(self, *args)

    def __len__(self, *args):
        return _m67528b5919f90a46eeeb39e7c6323718.Rocket___len__(self, *args)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m67528b5919f90a46eeeb39e7c6323718.new_Rocket()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "Rocket", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _m67528b5919f90a46eeeb39e7c6323718.delete_Rocket
    __del__ = lambda self: None
Rocket_swigregister = _m67528b5919f90a46eeeb39e7c6323718.Rocket_swigregister
Rocket_swigregister(Rocket)


def castAsRocket(*args):
    return _m67528b5919f90a46eeeb39e7c6323718.castAsRocket(*args)
castAsRocket = _m67528b5919f90a46eeeb39e7c6323718.castAsRocket
# This file is compatible with both classic and new-style classes.


